<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use App\Models\Product;
use App\Models\Cart;
use App\Models\Order;
use App\Models\Payment; // Th√™m d√≤ng n√†y
use App\Models\OrderDetail;
use App\Models\Category;


class CartController extends Controller
{
    // Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
    public function addToCart(Request $request)
{
    if (!Auth::check()) {
        return redirect()->route('login')->with('error', 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.');
    }

    $product = Product::findOrFail($request->product_id);

    // üõë Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m c√≤n h√†ng
    if ($product->stock <= 0) {
        return redirect()->route('cart.index')->with('error', 'S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng!');
    }

    // ‚úÖ T√≠nh gi√° sau gi·∫£m gi√° (n·∫øu c√≥)
    $discountAmount = ($product->discount_percentage > 0 && now()->between($product->discount_start_date, $product->discount_end_date)) 
                        ? ($product->price * $product->discount_percentage / 100) 
                        : 0;

    $finalPrice = $product->price - $discountAmount;

    $cartItem = Cart::where('user_id', Auth::id())->where('product_id', $product->id)->first();

    if ($cartItem) {
        // üõë Ki·ªÉm tra n·∫øu s·ªë l∆∞·ª£ng trong kho ƒë·ªß ƒë·ªÉ tƒÉng
        if ($product->stock < 1) {
            return redirect()->route('cart.index')->with('error', 'S·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong kho kh√¥ng ƒë·ªß.');
        }

        $cartItem->increment('quantity');
    } else {
        Cart::create([
            'user_id' => Auth::id(),
            'product_id' => $product->id,
            'quantity' => 1,
            'price' => $finalPrice  // L∆∞u gi√° ƒë√£ gi·∫£m v√†o gi·ªè h√†ng
        ]);
    }

    // ‚úÖ Gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong kho
    $product->decrement('stock');

    return redirect()->route('cart.index')->with('success', 'ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!');
}

    

    // Hi·ªÉn th·ªã gi·ªè h√†ng
    public function showCart()
{
    $cartItems = Cart::where('user_id', Auth::id())->with('product')->get();
    
    // L·∫•y danh s√°ch danh m·ª•c n·∫øu c·∫ßn
    $categories = Category::all(); 

    return view('user.cart.index', compact('cartItems', 'categories'));
}


    // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    public function removeFromCart($id)
{
    $cartItem = Cart::where('id', $id)->where('user_id', Auth::id())->firstOrFail();

    // ‚úÖ T√¨m s·∫£n ph·∫©m t∆∞∆°ng ·ª©ng
    $product = Product::findOrFail($cartItem->product_id);

    // ‚úÖ C·ªông l·∫°i s·ªë l∆∞·ª£ng v√†o kho
    $product->increment('stock', $cartItem->quantity);

    // ‚úÖ X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    $cartItem->delete();

    return back()->with('success', 'ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng v√† c·∫≠p nh·∫≠t l·∫°i s·ªë l∆∞·ª£ng trong kho!');
}


    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
    public function update(Request $request, $id)
    {
        $cartItem = Cart::where('id', $id)->where('user_id', Auth::id())->firstOrFail();
        $product = Product::findOrFail($cartItem->product_id);
    
        $request->validate([
            'quantity' => 'required|integer|min:1'
        ]);
    
        $newQuantity = $request->quantity;
        $oldQuantity = $cartItem->quantity;
        $difference = $newQuantity - $oldQuantity; // T√≠nh ch√™nh l·ªách s·ªë l∆∞·ª£ng
    
        // Ki·ªÉm tra n·∫øu tƒÉng s·ªë l∆∞·ª£ng th√¨ ph·∫£i tr·ª´ kho
        if ($difference > 0) {
            if ($product->stock < $difference) {
                return back()->with('error', 'Kh√¥ng ƒë·ªß h√†ng trong kho!');
            }
            $product->decrement('stock', $difference);
        } 
        // N·∫øu gi·∫£m s·ªë l∆∞·ª£ng th√¨ c·ªông l·∫°i kho
        elseif ($difference < 0) {
            $product->increment('stock', abs($difference));
        }
    
        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong gi·ªè h√†ng
        $cartItem->update(['quantity' => $newQuantity]);
    
        return redirect()->route('cart.index')->with('success', 'ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m.');
    }
    

    // Hi·ªÉn th·ªã trang thanh to√°n
    public function checkoutForm()
    {
        $cartItems = Cart::where('user_id', Auth::id())->with('product')->get();

        if ($cartItems->isEmpty()) {
            return redirect()->route('cart.index')->with('error', 'Gi·ªè h√†ng tr·ªëng.');
        }

        return view('user.cart.checkout', compact('cartItems'));
    }

    // X·ª≠ l√Ω thanh to√°n v√† t·∫°o ƒë∆°n h√†ng
    public function checkout(Request $request)
{
    $user = Auth::user();
    $cartItems = Cart::where('user_id', $user->id)->with('product')->get();

    if ($cartItems->isEmpty()) {
        return redirect()->route('cart.index')->with('error', 'Gi·ªè h√†ng tr·ªëng.');
    }

    $request->validate([
        'customer_name' => 'required|string|max:255',
        'address' => 'required|string|max:255',
        'phone' => 'required|regex:/^0[0-9]{9}$/'
    ]);

    DB::beginTransaction();
    try {
        $totalPrice = 0;
        foreach ($cartItems as $item) {
            $product = $item->product;
            $discountAmount = ($product->discount_percentage > 0 &&
                               now()->between($product->discount_start_date, $product->discount_end_date))
                ? ($product->price * $product->discount_percentage / 100)
                : 0;
            $finalPrice = $product->price - $discountAmount;
            $totalPrice += $finalPrice * $item->quantity;
        }

        // T·∫°o ƒë∆°n h√†ng m·ªõi
        $order = Order::create([
            'user_id' => $user->id,
            'total_price' => $totalPrice,
            'status' => 'ƒêang x·ª≠ l√Ω',
            'customer_name' => $request->customer_name,
            'address' => $request->address,
            'phone' => $request->phone,
        ]);

        $orderDetails = [];
        foreach ($cartItems as $item) {
            $product = $item->product;
            if ($product->stock < $item->quantity) {
                return back()->with('error', 'S·∫£n ph·∫©m ' . $product->name . ' kh√¥ng ƒë·ªß h√†ng trong kho.');
            }

            // Gi·∫£m s·ªë l∆∞·ª£ng t·ªìn kho
            $product->decrement('stock', $item->quantity);

            // T√≠nh l·∫°i gi√° ƒë√£ gi·∫£m
            $discountAmount = ($product->discount_percentage > 0 &&
                               now()->between($product->discount_start_date, $product->discount_end_date))
                ? ($product->price * $product->discount_percentage / 100)
                : 0;
            $finalPrice = $product->price - $discountAmount;

            $orderDetails[] = [
                'order_id' => $order->id,
                'product_id' => $product->id,
                'quantity' => $item->quantity,
                'price' => $finalPrice,
            ];
        }

        // L∆∞u to√†n b·ªô chi ti·∫øt ƒë∆°n h√†ng m·ªôt l·∫ßn
        OrderDetail::insert($orderDetails);

        // L∆∞u th√¥ng tin thanh to√°n v√†o b·∫£ng payments
        Payment::create([
            'order_id' => $order->id,
            'payment_method' => 'COD', // Thay b·∫±ng ph∆∞∆°ng th·ª©c thanh to√°n th·ª±c t·∫ø (VNPay, PayPal, etc.)
            'payment_status' => 'Ch∆∞a thanh to√°n', // C·∫≠p nh·∫≠t tr·∫°ng th√°i sau khi thanh to√°n th√†nh c√¥ng
            'transaction_id' => null, // ƒê·ªëi v·ªõi thanh to√°n online, c√≥ th·ªÉ c·∫≠p nh·∫≠t sau
            'payment_date' => null, // C·∫≠p nh·∫≠t khi thanh to√°n th√†nh c√¥ng
        ]);

        // X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
        Cart::where('user_id', $user->id)->delete();

        DB::commit();
        return redirect()->route('cart.index')->with('success', 'ƒê·∫∑t h√†ng th√†nh c√¥ng!');
    } catch (\Exception $e) {
        DB::rollBack();
        dd($e->getMessage()); // Xem l·ªói chi ti·∫øt
        return redirect()->back()->with('error', 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng.');
    }
}

    

    // H·ªßy ƒë∆°n h√†ng v√† ho√†n l·∫°i s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    public function cancelOrder($id)
    {
        $order = Order::where('id', $id)->where('user_id', Auth::id())->with('orderDetails')->firstOrFail();

        if ($order->status !== 'ƒêang x·ª≠ l√Ω') {
            return back()->with('error', 'Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng khi ƒëang ·ªü tr·∫°ng th√°i "ƒêang x·ª≠ l√Ω".');
        }

        DB::beginTransaction();
        try {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
            $order->update(['status' => 'ƒê√£ h·ªßy']);

            // Ho√†n l·∫°i s·ªë l∆∞·ª£ng s·∫£n ph·∫©m v√†o kho
            foreach ($order->orderDetails as $detail) {
                Product::where('id', $detail->product_id)->increment('stock', $detail->quantity);
            }

            DB::commit();
            return back()->with('success', 'ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy v√† s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë∆∞·ª£c ho√†n l·∫°i.');
        } catch (\Exception $e) {
            DB::rollBack();
            return back()->with('error', 'C√≥ l·ªói x·∫£y ra khi h·ªßy ƒë∆°n h√†ng.');
        }
    }
}
